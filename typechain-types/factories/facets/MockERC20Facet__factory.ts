/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockERC20Facet,
  MockERC20FacetInterface,
} from "../../facets/MockERC20Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender_",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "construct",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from_",
        type: "address",
      },
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a1e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806370a082311161005b57806370a082311461010057806394b91deb14610130578063a9059cbb1461014e578063dd62ed3e1461017e5761007d565b8063095ea7b31461008257806318160ddd146100b257806323b872dd146100d0575b600080fd5b61009c600480360381019061009791906106f1565b6101ae565b6040516100a9919061074c565b60405180910390f35b6100ba6101b6565b6040516100c79190610776565b60405180910390f35b6100ea60048036038101906100e59190610791565b6101ce565b6040516100f7919061074c565b60405180910390f35b61011a600480360381019061011591906107e4565b6101d7565b6040516101279190610776565b60405180910390f35b61013861022e565b604051610145919061074c565b60405180910390f35b610168600480360381019061016391906106f1565b61033c565b604051610175919061074c565b60405180910390f35b61019860048036038101906101939190610811565b6103e3565b6040516101a59190610776565b60405180910390f35b600092915050565b6000806101c16103eb565b9050806002015491505090565b60009392505050565b6000806101e26103eb565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b6000806102396103eb565b90506040518060400160405280600781526020017f4d6f636b47656d000000000000000000000000000000000000000000000000008152508160030190805190602001906102889291906105b5565b506040518060400160405280600381526020017f47454d00000000000000000000000000000000000000000000000000000000008152508160040190805190602001906102d69291906105b5565b5069d3c21bcecceda1000000816002018190555080600201548160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505090565b6000806103476103eb565b9050828160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c4906108ae565b60405180910390fd5b6103d78484610418565b50600191505092915050565b600092915050565b6000807f17789449870c0f58d74ae3f2b54e2ffd15a4ba87c9c4b606fe8968555d61b02f90508091505090565b6000806104236103eb565b9050828160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461047291906108fd565b8160000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550828160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105049190610931565b8160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516105a69190610776565b60405180910390a35092915050565b8280546105c1906109b6565b90600052602060002090601f0160209004810192826105e3576000855561062a565b82601f106105fc57805160ff191683800117855561062a565b8280016001018555821561062a579182015b8281111561062957825182559160200191906001019061060e565b5b509050610637919061063b565b5090565b5b8082111561065457600081600090555060010161063c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106888261065d565b9050919050565b6106988161067d565b81146106a357600080fd5b50565b6000813590506106b58161068f565b92915050565b6000819050919050565b6106ce816106bb565b81146106d957600080fd5b50565b6000813590506106eb816106c5565b92915050565b6000806040838503121561070857610707610658565b5b6000610716858286016106a6565b9250506020610727858286016106dc565b9150509250929050565b60008115159050919050565b61074681610731565b82525050565b6000602082019050610761600083018461073d565b92915050565b610770816106bb565b82525050565b600060208201905061078b6000830184610767565b92915050565b6000806000606084860312156107aa576107a9610658565b5b60006107b8868287016106a6565b93505060206107c9868287016106a6565b92505060406107da868287016106dc565b9150509250925092565b6000602082840312156107fa576107f9610658565b5b6000610808848285016106a6565b91505092915050565b6000806040838503121561082857610827610658565b5b6000610836858286016106a6565b9250506020610847858286016106a6565b9150509250929050565b600082825260208201905092915050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000610898601283610851565b91506108a382610862565b602082019050919050565b600060208201905081810360008301526108c78161088b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610908826106bb565b9150610913836106bb565b925082821015610926576109256108ce565b5b828203905092915050565b600061093c826106bb565b9150610947836106bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561097c5761097b6108ce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109ce57607f821691505b602082108114156109e2576109e1610987565b5b5091905056fea2646970667358221220406e5c31e8c073805cba07ef735d941b96c824ec8ec1372bd62aacc9fee2b97f64736f6c63430008090033";

type MockERC20FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20Facet__factory extends ContractFactory {
  constructor(...args: MockERC20FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20Facet> {
    return super.deploy(overrides || {}) as Promise<MockERC20Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockERC20Facet {
    return super.attach(address) as MockERC20Facet;
  }
  override connect(signer: Signer): MockERC20Facet__factory {
    return super.connect(signer) as MockERC20Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20FacetInterface {
    return new utils.Interface(_abi) as MockERC20FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20Facet {
    return new Contract(address, _abi, signerOrProvider) as MockERC20Facet;
  }
}
