/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BrokerPublicFacet,
  BrokerPublicFacetInterface,
} from "../../facets/BrokerPublicFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "buyer_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "Bought",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "buyer_",
        type: "address",
      },
    ],
    name: "bought",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "remaining",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061115b806100206000396000f3fe60806040526004361061003f5760003560e01c806355234ec014610044578063667022fd1461006f578063a035b1fe146100ad578063d96a094a146100d8575b600080fd5b34801561005057600080fd5b50610059610108565b6040516100669190610b45565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610bc3565b6101fd565b6040516100a4929190610bf0565b60405180910390f35b3480156100b957600080fd5b506100c261029b565b6040516100cf9190610b45565b60405180910390f35b6100f260048036038101906100ed9190610c45565b610344565b6040516100ff9190610c8d565b60405180910390f35b6000610112610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16036101a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019b90610d2b565b60405180910390fd5b60008054906101000a900460ff16156101bc57600080fd5b60016000806101000a81548160ff0219169083151502179055506101de610574565b905060008060006101000a81548160ff02191690831515021790555090565b600080610208610759565b60000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610251610759565b60010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491509150915091565b60006102a5610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1603610337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032e90610d2b565b60405180910390fd5b61033f610786565b905090565b600061034e610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16036103e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d790610d2b565b60405180910390fd5b60008054906101000a900460ff16156103f857600080fd5b60016000806101000a81548160ff021916908315150217905550600061041c610574565b905060028361042b9190610d7a565b81101561046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046490610e6c565b60405180910390fd5b6000610477610786565b846104829190610d7a565b9050670de0b6b3a7640000816104989190610ebb565b3410156104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190610f5e565b60405180910390fd5b6104e384610846565b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990610fca565b60405180910390fd5b60019250505060008060006101000a81548160ff021916908315150217905550919050565b6000807f24b0e1f5977fca2c09daf3a5a3da902abb74fecaf1a06fb9303e8c5419cf523290508091505090565b600061057e610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1603610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610d2b565b60405180910390fd5b600061061a610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060028273ffffffffffffffffffffffffffffffffffffffff1663d5abeb016040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b59190610fff565b6106bf9190610ebb565b905060008273ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610fff565b9050808211610744576000610751565b8082610750919061102c565b5b935050505090565b6000807fe81aed516d085c209edd69067e2f32248087ae8ed4f342af0078c6780df30d8e90508091505090565b6000610790610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1603610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081990610d2b565b60405180910390fd5b61082a610547565b60020154670de0b6b3a76400006108419190610ebb565b905090565b6000610850610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16036108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990610d2b565b60405180910390fd5b816108eb610759565b60000160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461093a9190611060565b925050819055503461094a610759565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109999190611060565b92505081905550813373ffffffffffffffffffffffffffffffffffffffff167fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d6760405160405180910390a360006109ee610547565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166340c10f1933866040518363ffffffff1660e01b8152600401610a519291906110a3565b6020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906110f8565b905060008273ffffffffffffffffffffffffffffffffffffffff166340c10f1930876040518363ffffffff1660e01b8152600401610ad39291906110a3565b6020604051808303816000875af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1691906110f8565b9050818015610b225750805b9350505050919050565b6000819050919050565b610b3f81610b2c565b82525050565b6000602082019050610b5a6000830184610b36565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9082610b65565b9050919050565b610ba081610b85565b8114610bab57600080fd5b50565b600081359050610bbd81610b97565b92915050565b600060208284031215610bd957610bd8610b60565b5b6000610be784828501610bae565b91505092915050565b6000604082019050610c056000830185610b36565b610c126020830184610b36565b9392505050565b610c2281610b2c565b8114610c2d57600080fd5b50565b600081359050610c3f81610c19565b92915050565b600060208284031215610c5b57610c5a610b60565b5b6000610c6984828501610c30565b91505092915050565b60008115159050919050565b610c8781610c72565b82525050565b6000602082019050610ca26000830184610c7e565b92915050565b600082825260208201905092915050565b7f4e6f20746f6b656e2073657420666f722062726f6b65726167652e204368656360008201527f6b20646569742e636120666f722073746174757320757064617465732e000000602082015250565b6000610d15603d83610ca8565b9150610d2082610cb9565b604082019050919050565b60006020820190508181036000830152610d4481610d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8582610b2c565b9150610d9083610b2c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dc957610dc8610d4b565b5b828202905092915050565b7f466978656420707269636520737570706c79206361707065642061742068616c60008201527f66206d61782c207768696368207468697320707572636861736520776f756c6460208201527f206272656163682e000000000000000000000000000000000000000000000000604082015250565b6000610e56604883610ca8565b9150610e6182610dd4565b606082019050919050565b60006020820190508181036000830152610e8581610e49565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec682610b2c565b9150610ed183610b2c565b925082610ee157610ee0610e8c565b5b828204905092915050565b7f496e73756666696369656e7420455448207472616e7366657272656420666f7260008201527f20616d6f756e742e000000000000000000000000000000000000000000000000602082015250565b6000610f48602883610ca8565b9150610f5382610eec565b604082019050919050565b60006020820190508181036000830152610f7781610f3b565b9050919050565b7f4572726f722070757263686173696e6720746f6b656e732e0000000000000000600082015250565b6000610fb4601883610ca8565b9150610fbf82610f7e565b602082019050919050565b60006020820190508181036000830152610fe381610fa7565b9050919050565b600081519050610ff981610c19565b92915050565b60006020828403121561101557611014610b60565b5b600061102384828501610fea565b91505092915050565b600061103782610b2c565b915061104283610b2c565b925082820390508181111561105a57611059610d4b565b5b92915050565b600061106b82610b2c565b915061107683610b2c565b925082820190508082111561108e5761108d610d4b565b5b92915050565b61109d81610b85565b82525050565b60006040820190506110b86000830185611094565b6110c56020830184610b36565b9392505050565b6110d581610c72565b81146110e057600080fd5b50565b6000815190506110f2816110cc565b92915050565b60006020828403121561110e5761110d610b60565b5b600061111c848285016110e3565b9150509291505056fea264697066735822122069fcd915e22fcacdbf621be0bd0a3c7ecab481694b13f29a93bce9252698b88064736f6c63430008100033";

type BrokerPublicFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BrokerPublicFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BrokerPublicFacet__factory extends ContractFactory {
  constructor(...args: BrokerPublicFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BrokerPublicFacet> {
    return super.deploy(overrides || {}) as Promise<BrokerPublicFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BrokerPublicFacet {
    return super.attach(address) as BrokerPublicFacet;
  }
  override connect(signer: Signer): BrokerPublicFacet__factory {
    return super.connect(signer) as BrokerPublicFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BrokerPublicFacetInterface {
    return new utils.Interface(_abi) as BrokerPublicFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BrokerPublicFacet {
    return new Contract(address, _abi, signerOrProvider) as BrokerPublicFacet;
  }
}
