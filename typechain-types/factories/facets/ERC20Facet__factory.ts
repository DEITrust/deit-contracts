/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { ERC20Facet, ERC20FacetInterface } from "../../facets/ERC20Facet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSupply_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "mintTo_",
        type: "address",
      },
    ],
    name: "erc20Init",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061127e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638b3f23731161005b5780638b3f23731461011757806395d89b4114610147578063a9059cbb14610165578063d5abeb011461019557610088565b806306fdde031461008d57806318160ddd146100ab578063313ce567146100c957806370a08231146100e7575b600080fd5b6100956101b3565b6040516100a29190610809565b60405180910390f35b6100b361024e565b6040516100c09190610844565b60405180910390f35b6100d1610261565b6040516100de919061087b565b60405180910390f35b61010160048036038101906100fc9190610908565b610281565b60405161010e9190610844565b60405180910390f35b610131600480360381019061012c9190610ac2565b6102d3565b60405161013e9190610ba2565b60405180910390f35b61014f6103e5565b60405161015c9190610809565b60405180910390f35b61017f600480360381019061017a9190610bbd565b610480565b60405161018c9190610ba2565b60405180910390f35b61019d610495565b6040516101aa9190610844565b60405180910390f35b60606101bd6104a8565b60000180546101cb90610c2c565b80601f01602080910402602001604051908101604052809291908181526020018280546101f790610c2c565b80156102445780601f1061021957610100808354040283529160200191610244565b820191906000526020600020905b81548152906001019060200180831161022757829003601f168201915b5050505050905090565b60006102586104a8565b60030154905090565b600061026b6104a8565b60020160009054906101000a900460ff16905090565b600061028b6104a8565b60050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006102dd6104d5565b60006102e76104a8565b9050878160000190816102fa9190610e09565b508681600101908161030c9190610e09565b50858160020160006101000a81548160ff021916908360ff1602179055508060020160009054906101000a900460ff16600a610348919061103d565b856103539190611088565b81600301819055508060020160009054906101000a900460ff16600a610379919061103d565b846103849190611088565b816004018190555080600301548160050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019150509695505050505050565b60606103ef6104a8565b60010180546103fd90610c2c565b80601f016020809104026020016040519081016040528092919081815260200182805461042990610c2c565b80156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b5050505050905090565b600061048d338484610570565b905092915050565b600061049f6104a8565b60040154905090565b6000807fd625622b8b695b0700ebaee84f5619cbdf87b4e616110b3186a34ca682144b1590508091505090565b6104dd6106a9565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611154565b60405180910390fd5b565b600061057c84836106d6565b60006105866104a8565b9050828160050160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105d99190611174565b92505081905550828160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063191906111a8565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516106959190610844565b60405180910390a360019150509392505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6106e08282610723565b61071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071690611228565b60405180910390fd5b5050565b60008161072e6104a8565b60050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015905092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107b3578082015181840152602081019050610798565b60008484015250505050565b6000601f19601f8301169050919050565b60006107db82610779565b6107e58185610784565b93506107f5818560208601610795565b6107fe816107bf565b840191505092915050565b6000602082019050818103600083015261082381846107d0565b905092915050565b6000819050919050565b61083e8161082b565b82525050565b60006020820190506108596000830184610835565b92915050565b600060ff82169050919050565b6108758161085f565b82525050565b6000602082019050610890600083018461086c565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108d5826108aa565b9050919050565b6108e5816108ca565b81146108f057600080fd5b50565b600081359050610902816108dc565b92915050565b60006020828403121561091e5761091d6108a0565b5b600061092c848285016108f3565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610977826107bf565b810181811067ffffffffffffffff821117156109965761099561093f565b5b80604052505050565b60006109a9610896565b90506109b5828261096e565b919050565b600067ffffffffffffffff8211156109d5576109d461093f565b5b6109de826107bf565b9050602081019050919050565b82818337600083830152505050565b6000610a0d610a08846109ba565b61099f565b905082815260208101848484011115610a2957610a2861093a565b5b610a348482856109eb565b509392505050565b600082601f830112610a5157610a50610935565b5b8135610a618482602086016109fa565b91505092915050565b610a738161085f565b8114610a7e57600080fd5b50565b600081359050610a9081610a6a565b92915050565b610a9f8161082b565b8114610aaa57600080fd5b50565b600081359050610abc81610a96565b92915050565b60008060008060008060c08789031215610adf57610ade6108a0565b5b600087013567ffffffffffffffff811115610afd57610afc6108a5565b5b610b0989828a01610a3c565b965050602087013567ffffffffffffffff811115610b2a57610b296108a5565b5b610b3689828a01610a3c565b9550506040610b4789828a01610a81565b9450506060610b5889828a01610aad565b9350506080610b6989828a01610aad565b92505060a0610b7a89828a016108f3565b9150509295509295509295565b60008115159050919050565b610b9c81610b87565b82525050565b6000602082019050610bb76000830184610b93565b92915050565b60008060408385031215610bd457610bd36108a0565b5b6000610be2858286016108f3565b9250506020610bf385828601610aad565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c4457607f821691505b602082108103610c5757610c56610bfd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610cbf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c82565b610cc98683610c82565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d06610d01610cfc8461082b565b610ce1565b61082b565b9050919050565b6000819050919050565b610d2083610ceb565b610d34610d2c82610d0d565b848454610c8f565b825550505050565b600090565b610d49610d3c565b610d54818484610d17565b505050565b5b81811015610d7857610d6d600082610d41565b600181019050610d5a565b5050565b601f821115610dbd57610d8e81610c5d565b610d9784610c72565b81016020851015610da6578190505b610dba610db285610c72565b830182610d59565b50505b505050565b600082821c905092915050565b6000610de060001984600802610dc2565b1980831691505092915050565b6000610df98383610dcf565b9150826002028217905092915050565b610e1282610779565b67ffffffffffffffff811115610e2b57610e2a61093f565b5b610e358254610c2c565b610e40828285610d7c565b600060209050601f831160018114610e735760008415610e61578287015190505b610e6b8582610ded565b865550610ed3565b601f198416610e8186610c5d565b60005b82811015610ea957848901518255600182019150602085019450602081019050610e84565b86831015610ec65784890151610ec2601f891682610dcf565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610f6157808604811115610f3d57610f3c610edb565b5b6001851615610f4c5780820291505b8081029050610f5a85610f0a565b9450610f21565b94509492505050565b600082610f7a5760019050611036565b81610f885760009050611036565b8160018114610f9e5760028114610fa857610fd7565b6001915050611036565b60ff841115610fba57610fb9610edb565b5b8360020a915084821115610fd157610fd0610edb565b5b50611036565b5060208310610133831016604e8410600b841016171561100c5782820a90508381111561100757611006610edb565b5b611036565b6110198484846001610f17565b925090508184048111156110305761102f610edb565b5b81810290505b9392505050565b60006110488261082b565b91506110538361085f565b92506110807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f6a565b905092915050565b60006110938261082b565b915061109e8361082b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110d7576110d6610edb565b5b828202905092915050565b7f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b600061113e602283610784565b9150611149826110e2565b604082019050919050565b6000602082019050818103600083015261116d81611131565b9050919050565b600061117f8261082b565b915061118a8361082b565b92508282039050818111156111a2576111a1610edb565b5b92915050565b60006111b38261082b565b91506111be8361082b565b92508282019050808211156111d6576111d5610edb565b5b92915050565b7f45524332303a20496e73756666696369656e742046756e647300000000000000600082015250565b6000611212601983610784565b915061121d826111dc565b602082019050919050565b6000602082019050818103600083015261124181611205565b905091905056fea26469706673582212207253a5d8a840e54433e9cccb1f8040ed73538f64d6a3bfdd4aaef2c95a3e314464736f6c63430008100033";

type ERC20FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Facet__factory extends ContractFactory {
  constructor(...args: ERC20FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Facet> {
    return super.deploy(overrides || {}) as Promise<ERC20Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Facet {
    return super.attach(address) as ERC20Facet;
  }
  override connect(signer: Signer): ERC20Facet__factory {
    return super.connect(signer) as ERC20Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20FacetInterface {
    return new utils.Interface(_abi) as ERC20FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Facet {
    return new Contract(address, _abi, signerOrProvider) as ERC20Facet;
  }
}
