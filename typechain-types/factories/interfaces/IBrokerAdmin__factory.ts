/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBrokerAdmin,
  IBrokerAdminInterface,
} from "../../interfaces/IBrokerAdmin";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "price_",
        type: "uint256",
      },
    ],
    name: "AssetPrice",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset_",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "underBrokerage_",
        type: "bool",
      },
    ],
    name: "BrokeredAsset",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "denominator_",
        type: "uint256",
      },
    ],
    name: "token",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IBrokerAdmin__factory {
  static readonly abi = _abi;
  static createInterface(): IBrokerAdminInterface {
    return new utils.Interface(_abi) as IBrokerAdminInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBrokerAdmin {
    return new Contract(address, _abi, signerOrProvider) as IBrokerAdmin;
  }
}
