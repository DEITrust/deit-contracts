/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BrokerAdminFacetInterface extends utils.Interface {
  functions: {
    "brokerAdminInit(string,address,uint256)": FunctionFragment;
    "token(string,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "brokerAdminInit"
      | "token(string,address,uint256)"
      | "token()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "brokerAdminInit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "token(string,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "token()", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "brokerAdminInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token(string,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token()", data: BytesLike): Result;

  events: {
    "AssetPrice(address,uint256)": EventFragment;
    "BrokeredAsset(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokeredAsset"): EventFragment;
}

export interface AssetPriceEventObject {
  asset_: string;
  price_: BigNumber;
}
export type AssetPriceEvent = TypedEvent<
  [string, BigNumber],
  AssetPriceEventObject
>;

export type AssetPriceEventFilter = TypedEventFilter<AssetPriceEvent>;

export interface BrokeredAssetEventObject {
  asset_: string;
  underBrokerage_: boolean;
}
export type BrokeredAssetEvent = TypedEvent<
  [string, boolean],
  BrokeredAssetEventObject
>;

export type BrokeredAssetEventFilter = TypedEventFilter<BrokeredAssetEvent>;

export interface BrokerAdminFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BrokerAdminFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    brokerAdminInit(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "token(string,address,uint256)"(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;
  };

  brokerAdminInit(
    symbol_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    denominator_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "token(string,address,uint256)"(
    symbol_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    denominator_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    brokerAdminInit(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "token(string,address,uint256)"(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssetPrice(address,uint256)"(
      asset_?: PromiseOrValue<string> | null,
      price_?: PromiseOrValue<BigNumberish> | null
    ): AssetPriceEventFilter;
    AssetPrice(
      asset_?: PromiseOrValue<string> | null,
      price_?: PromiseOrValue<BigNumberish> | null
    ): AssetPriceEventFilter;

    "BrokeredAsset(address,bool)"(
      asset_?: PromiseOrValue<string> | null,
      underBrokerage_?: PromiseOrValue<boolean> | null
    ): BrokeredAssetEventFilter;
    BrokeredAsset(
      asset_?: PromiseOrValue<string> | null,
      underBrokerage_?: PromiseOrValue<boolean> | null
    ): BrokeredAssetEventFilter;
  };

  estimateGas: {
    brokerAdminInit(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "token(string,address,uint256)"(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    brokerAdminInit(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "token(string,address,uint256)"(
      symbol_: PromiseOrValue<string>,
      token_: PromiseOrValue<string>,
      denominator_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
